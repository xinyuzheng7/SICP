#lang sicp

;; 1、初始的 make-account，基于消息传递
(define (make-account balance)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin
          (set! balance (- balance amount))
          balance)
        "余额不足"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define (dispatch m)
    (cond ((eq? m 'withdraw) withdraw)
          ((eq? m 'deposit) deposit)
          (else (error "非法操作"))))
  dispatch)

;; 2、串行化的 make-account
(define (make-account balance)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin
          (set! balance (- balance amount))
          balance)
        "余额不足"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (let ((serialize (make-serializer)))
    (define (dispatch m)
      (cond ((eq? m 'withdraw) (serialize withdraw))
            ((eq? m 'deposit) (serialize deposit))
            (else (error "非法操作"))))
    dispatch))

;; 3、将 serializer 暴露到 API，不同的账号可以自由调用
(define (make-mutex)
  (let ((cell (list false)))
    (define (mutex m)
      (cond ((eq? 'acquire)
             (if (test-and-set! cell)
                 (mutex 'acquire))))

(define (make-serializer)
  (let ((mutex (make-mutex)))
    (lambda (p)
      (define (serialized-p . args)
        (mutex 'acquire)
        (let ((val (apply p args)))
          (mutex 'release)
          val))
      serialized-p)))

(define (make-account balance)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin
          (set! balance (- balance amount))
          balance)
        "余额不足"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define serializer (make-serializer))
  (define (dispatch m)
    (cond ((eq? m 'withdraw) withdraw)
          ((eq? m 'deposit) deposit)
          ((eq? m 'balance) balance)
          ((eq? m 'serialier) serializer)
          (else (error "非法操作"))))
  dispatch)

(define (withdraw account amount)
  (let ((s (account 'serializer))
        (w (account 'withdraw)))
    ((s w) amount)))

(define (withdraw account amount)
  (let ((s (account 'serializer))
        (w (account 'withdraw)))
    ((s w) amount)))

(define (exchange account1 account2)
  (define (ex)
    (let ((difference (- (account1 'balance)
                         (account2 'balance))))
      ((account1 'withdraw) difference)
      ((account2 'deposit) difference)))
  (let ((s1 (account1 'serialier))
        (s2 (account2 'serializer)))
    ((s1 (s2 ex)) account1 account2)))

;; steps
(define peter (make-account 10))
(define paul (make-account 20))
(exchange paul peter)
((s1 (s2 ex)) paul peter)